{"version":3,"sources":["serviceWorker.js","actions/index.js","containers/search_bar.js","components/chart.js","containers/weather_list.js","components/app.js","reducers/index.js","reducers/reducer_weather.js","index.js"],"names":["Boolean","window","location","hostname","match","ROOT_URL","concat","FETCH_WEATHER","fetchWeather","city","url","request","axios","get","then","response","catch","error","console","log","type","payload","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onInputChange","e","setState","term","target","value","onFormSubmit","preventDefault","state","react_default","a","createElement","onSubmit","className","placeholder","onChange","Component","connect","dispatch","bindActionCreators","chart","build","height","width","data","color","_","round","sum","length","units","WeatherList","cityData","cod","name","temps","map","list","weather","main","temp","pressure","humidity","key","renderWeather","_ref","App","search_bar","weather_list","rootReducer","combineReducers","arguments","undefined","action","toConsumableArray","createStoreWithMiddleware","applyMiddleware","ReduxPromise","createStore","ReactDOM","render","es","store","reducers","app_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.035aadec.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from \"axios\";\r\n\r\nconst API_KEY = \"6f6010ab4f2af6f2280bc441a6070872\";\r\nconst ROOT_URL = `https://api.openweathermap.org/data/2.5/forecast?appid=${API_KEY}`;\r\nexport const FETCH_WEATHER = 'FETCH_WEATHER';\r\n\r\nexport function fetchWeather(city) {\r\nconst url = `${ROOT_URL}&q=${city},us`;\r\nconst request = axios.get(url).then((response) => response).catch((error) => error.response);\r\nconsole.log('Request:', request);\r\n\r\n  return {\r\n    type: FETCH_WEATHER,\r\n    payload: request\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport { fetchWeather } from '../actions/index';\r\n\r\nclass SearchBar extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { term: ''};\r\n    // this.onInputChange = this.onInputChange.bind(this);\r\n  }\r\n\r\n  onInputChange = (e) => this.setState({term: e.target.value});\r\n  onFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    // We need to fetch weather data\r\n    this.props.fetchWeather(this.state.term);\r\n    this.setState({term:''});\r\n  }\r\n\r\n  render() {\r\n    return(\r\n        <form onSubmit={this.onFormSubmit} className=\"input-group\">\r\n          <input\r\n          placeholder=\"Get a five-day forecast in your favorite cities of United States.\"\r\n          className=\"form-control\"\r\n          onChange={this.onInputChange}\r\n          value={this.state.term} />\r\n          <span className=\"input-group-btn\">\r\n          <button type=\"submit\" className=\"btn btn-secondary\">Submit</button>\r\n          </span>\r\n        </form>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapDispatchtoProps(dispatch) {\r\nreturn bindActionCreators({fetchWeather}, dispatch);\r\n}\r\n\r\nexport default connect(null, mapDispatchtoProps)(SearchBar);\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\nimport { Sparklines, SparklinesLine, SparklinesReferenceLine} from 'react-sparklines';\r\n\r\nconst average = (data) => {\r\n  return _.round((_.sum(data)/data.length));\r\n}\r\n\r\nexport default (props) => {\r\n  return (\r\n    <div>\r\n    <Sparklines height={80} width={80} data={props.data}>\r\n      <SparklinesLine color={props.color} />\r\n      <SparklinesReferenceLine type=\"avg\" />\r\n    </Sparklines>\r\n    <div>\r\n    {average(props.data)} {props.units}\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Chart from '../components/chart';\r\nimport _ from 'lodash';\r\n// import GoogleMap from '../components/google_map';\r\n\r\nclass WeatherList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      term: ''\r\n    };\r\n  }\r\n\r\nrenderWeather(cityData)  {\r\n\r\n  if(cityData.cod !== '404'){\r\n  \r\n  const name = cityData.city.name;\r\n  const temps = _.map(cityData.list.map(weather => weather.main.temp), (temp) => temp - 273);\r\n  const pressure = cityData.list.map(weather => weather.main.pressure);\r\n  const humidity = cityData.list.map(weather => weather.main.humidity);\r\n  // const { lon, lat } = cityData.city.coord;\r\n\r\n  return(\r\n  <tr key={name}>\r\n  <td>{name}</td>\r\n  <td><Chart data={temps} color=\"orange\" units=\"C\"/></td>\r\n  <td><Chart data={pressure} color=\"gray\"  units=\"hPa\"/></td>\r\n  <td><Chart data={humidity} color=\"green\"  units=\"%\" /></td>\r\n  </tr>\r\n);\r\n\r\n  } else {\r\n    \r\n    return <p>Please enter a valid state within US</p>;\r\n    \r\n  }\r\n\r\n\r\n}\r\n\r\n  \r\n  render() {\r\n    return (\r\n      <table className=\"table table-hover\">\r\n      <thead>\r\n      <tr>\r\n      <th>City</th>\r\n      <th>Temprature(C)</th>\r\n      <th>Pressure (hPa)</th>\r\n      <th>Humidity(%)</th>\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      {this.props.weather.map(this.renderWeather)}\r\n      \r\n\r\n      </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStatetoProps({weather}) { // same as state.weather\r\n   return { weather }; // same as  { weather : weather }\r\n }\r\n\r\nexport default connect(mapStatetoProps)(WeatherList);\r\n","import React, { Component } from 'react';\r\nimport SearchBar from '../containers/search_bar';\r\nimport WeatherList from '../containers/weather_list';\r\n\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n      <SearchBar />\r\n      <WeatherList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport WeatherReducer from './reducer_weather';\r\n\r\nconst rootReducer = combineReducers({\r\n   weather: WeatherReducer\r\n});\r\n\r\nexport default rootReducer;\r\n","import {FETCH_WEATHER} from '../actions/index';\r\n\r\nexport default (state = [], action) => {\r\n// console.log('action reducer', action);\r\n\r\nswitch(action.type) {\r\n  case FETCH_WEATHER:\r\n  // console.log(action.payload.data);\r\n  return [action.payload.data, ...state];\r\n  default:\r\n   return state;\r\n}\r\n\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport ReduxPromise from 'redux-promise';\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"./style/style.css\";\r\n\r\n\r\nimport App from './components/app';\r\nimport reducers from './reducers';\r\n\r\nconst createStoreWithMiddleware = applyMiddleware(ReduxPromise)(createStore);\r\n\r\nReactDOM.render(\r\n  <Provider store={createStoreWithMiddleware(reducers)}>\r\n    <App />\r\n  </Provider>\r\n  , document.getElementById(\"root\"));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}